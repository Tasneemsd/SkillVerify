student.js
const express = require("express");
const router = express.Router();
const Student = require("../models/Student");

// 🔹 GET student by email
router.get("/", async (req, res) => {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "Email is required" });
    }

    const student = await Student.findOne({ email }).populate("registeredCourses");
    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    return res.status(200).json(student);
  } catch (err) {
    console.error("❌ Student fetch error:", err);
    return res.status(500).json({ message: "Server error", error: err.message });
  }
});

module.exports = router;

const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const Application = require("../models/Application");

// POST - apply for job
router.post("/", async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "No token provided" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");
    if (decoded.role !== "student") return res.status(403).json({ message: "Only students can apply" });

    const { jobId } = req.body;
    if (!jobId) return res.status(400).json({ message: "Job ID required" });

    const existingApp = await Application.findOne({ studentId: decoded.id, jobId });
    if (existingApp) return res.status(400).json({ message: "Already applied for this job" });

    const application = await Application.create({
      studentId: decoded.id,
      jobId,
      status: "Applied",
      appliedOn: new Date(),
    });

    return res.status(200).json({ success: true, message: "Applied successfully", application });
  } catch (err) {
    console.error("Application error:", err);
    return res.status(500).json({ message: "Application failed", error: err.message });
  }
});

// GET - fetch student applications
router.get("/", async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "No token provided" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");
    if (decoded.role !== "student") return res.status(403).json({ message: "Only students can fetch applications" });

    const applications = await Application.find({ studentId: decoded.id });
    return res.status(200).json(applications);
  } catch (err) {
    console.error("Fetch applications error:", err);
    return res.status(500).json({ message: "Failed to fetch applications" });
  }
});

module.exports = router;

student.js
const express = require("express");
const router = express.Router();
const Student = require("../models/Student");
const jwt = require("jsonwebtoken");

// ✅ GET student profile using JWT
router.get("/me", async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "No token provided or invalid format" });
    }

    const token = authHeader.split(" ")[1].replace(/"/g, "");
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");
    } catch (err) {
      return res.status(401).json({ message: "Invalid or expired token" });
    }

    const student = await Student.findById(decoded.id).populate("registeredCourses");
    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    return res.status(200).json(student);
  } catch (err) {
    console.error("❌ Student /me fetch error:", err);
    return res.status(500).json({ message: "Server error", error: err.message });
  }
});

// ✅ GET student by email (fallback for cases when JWT not sent)
router.get("/", async (req, res) => {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "Email is required" });
    }

    const student = await Student.findOne({ email }).populate("registeredCourses");
    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    return res.status(200).json(student);
  } catch (err) {
    console.error("❌ Student by email fetch error:", err);
    return res.status(500).json({ message: "Server error", error: err.message });
  }
});

module.exports = router;



studentEnroll.js
const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const Student = require("../models/Student");
const Course = require("../models/Course");

router.post("/enroll", async (req, res) => {
  try {
    const { courseId } = req.body;

    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "No token provided or invalid format" });
    }

    const token = authHeader.split(" ")[1].replace(/"/g, "");

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");
    } catch (err) {
      return res.status(401).json({ message: "Invalid or expired token" });
    }

    if (decoded.role !== "student")
      return res.status(403).json({ message: "Only students can enroll" });

    const student = await Student.findById(decoded.id);
    const course = await Course.findById(courseId);
    if (!student || !course) return res.status(404).json({ message: "Student or course not found" });

    if (student.registeredCourses.some((c) => c.toString() === course._id.toString()))
      return res.status(400).json({ message: "Already enrolled" });

    student.registeredCourses.push(course._id);
    await student.save();

    return res.status(200).json({
      success: true,
      message: "Enrolled successfully",
      registeredCourses: student.registeredCourses,
      course,
    });
  } catch (err) {
    console.error("Enroll error:", err);
    return res.status(500).json({ message: "Enrollment failed", error: err.message });
  }
});

module.exports = router;


index.js

const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const connectDB = require("./config/db");

// Load env vars
dotenv.config({ path: "./.env" });

if (!process.env.MONGO_URI) {
  console.error("❌ MONGO_URI is missing. Check your .env file.");
  process.exit(1);
} else {
  console.log("✅ MONGO_URI loaded");
}

connectDB();

// Seed dummy courses (optional, safe to remove in production)
const seedCourses = require("./seed/seedCourses");
seedCourses();

const app = express();

// ✅ Allow frontend
app.use(
  cors({
    origin: ["https://skill-verify.vercel.app"], // frontend domain
    credentials: true,
  })
);

app.use(express.json({ limit: "10mb" }));

// ✅ Routes
app.use("/api", require("./routes/auth"));
app.use("/api/courses", require("./routes/courses"));
app.use("/api/register-course", require("./routes/registerCourse"));
app.use("/api/student", require("./routes/student"));
app.use("/api/student/profile", require("./routes/studentProfile"));
app.use("/api/student/register-course", require("./routes/registerCourse"));
app.use("/api/jobs", require("./routes/jobs"));
app.use("/api/applications", require("./routes/applications"));
app.use("/api/recruiter", require("./routes/recruiter"));
app.use("/api/admin", require("./routes/admin"));
app.use("/api/notification", require("./routes/notification"));
app.use("/api/otp", require("./routes/otp"));
// Before
// app.use("/api/student/enroll", require("./routes/studentEnroll"));

// After
app.use("/api/student", require("./routes/studentEnroll"));


const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});

